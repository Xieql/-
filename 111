# 提高问题单处理效率的GROW模型

## 目标（Goal）
提高问题单处理效率

## 现状（Reality）
**实际体验：**
1. **问题实际当前版本不会复现**：问题在当前版本中不可复现，可能是其他PR无意间修复了该问题。
2. **非问题**：提单人无法理解当前的按键事件效果。
3. **定位人对代码逻辑不熟悉**：定位人对代码逻辑不熟悉，效率很低。
4. **需要反复添加日志**：需要反复添加日志，重复编译查看日志。

## 选项（Options）
**1. 问题的快速复现**
- **整理问题复现条件**：根据版本、测试机器等条件整理问题，统一尝试先看能否复现问题。

**2. 减少非问题数量**
- **增加FAQ**：创建常见问题的FAQ（内部或外部），解决如按钮点击默认不获焦这种与常识不一致的设定。

**3. 熟悉代码逻辑**
- **整理相关架构和逻辑**：系统整理相关架构和逻辑文档，帮助团队成员更快熟悉代码。
- **代码走读**：定期组织代码走读，提升团队对代码的理解和熟悉度。

**4. 减少反复添加日志的次数**
- **增加日志级别**：增加更多级别的日志（例如LOGI、LOGW、LOGE），当前只有LOGD级别的详细日志。
- **日志定位能力**：提升团队成员的日志定位能力，通过培训和工具提升效率。

**5. 对外接口文档**
- **完善对外接口文档**：确保对外接口文档清晰、详尽，减少因接口文档不全导致的问题和误解。

## 意愿（Will）
**具体行动计划：**

**1. 问题的快速复现**
- **整理问题复现条件**：
  - **负责人**：QA团队
  - **时间框架**：1个月内整理出常见问题的复现条件清单。
  - **行动步骤**：
    1. 收集历史问题单，分析复现条件。
    2. 根据版本和测试机器分类整理。
    3. 制定统一的测试流程，先尝试复现问题。

**2. 减少非问题数量**
- **增加FAQ**：
  - **负责人**：技术文档团队
  - **时间框架**：2个月内完成初版FAQ，并定期更新。
  - **行动步骤**：
    1. 收集常见的非问题类型。
    2. 编写详细的FAQ文档，解决常见误解。
    3. 在内部和外部发布，并在提单前要求查看FAQ。

**3. 熟悉代码逻辑**
- **整理相关架构和逻辑**：
  - **负责人**：技术负责人
  - **时间框架**：3个月内完成主要模块的架构和逻辑文档。
  - **行动步骤**：
    1. 确定需要文档化的主要模块。
    2. 编写详细的架构和逻辑文档。
    3. 定期组织代码走读和培训，帮助团队成员熟悉系统。

**4. 代码走读**
- **定期组织代码走读**：
  - **负责人**：技术负责人
  - **时间框架**：每月组织一次代码走读。
  - **行动步骤**：
    1. 选择一个模块进行详细的代码走读。
    2. 团队成员共同参与，讨论代码逻辑和架构设计。
    3. 记录讨论结果，并更新相关文档。

**5. 减少反复添加日志的次数**
- **增加日志级别**：
  - **负责人**：开发团队
  - **时间框架**：1个月内增加更多日志级别，并在主要模块中实施。
  - **行动步骤**：
    1. 确定需要增加的日志级别（如LOGI、LOGW、LOGE）。
    2. 修改现有的日志框架，支持新的日志级别。
    3. 在主要模块中添加详细日志，减少反复添加日志的次数。

- **提升日志定位能力**：
  - **负责人**：开发团队
  - **时间框架**：2个月内组织日志定位能力培训。
  - **行动步骤**：
    1. 制定培训计划，重点讲解日志使用和问题定位方法。
    2. 邀请有经验的开发人员分享日志定位的技巧和经验。
    3. 使用实际案例进行练习，提升团队成员的日志定位能力。

**6. 完善对外接口文档**
- **完善对外接口文档**：
  - **负责人**：技术文档团队
  - **时间框架**：3个月内完善所有对外接口文档。
  - **行动步骤**：
    1. 收集所有对外接口信息。
    2. 编写详细的接口文档，包含接口说明、参数、返回值和示例。
    3. 定期审查和更新接口文档，确保其准确性和完整性。

通过详细应用GROW模型，并结合实际经历，制定了具体的行动计划，以提高问题单处理效率。这不仅有助于快速复现问题，减少非问题数量，还能提升团队对代码逻辑的熟悉程度，并减少反复添加日志的次数。希望这些计划能够帮助你们更高效地处理问题单，提高整体工作效率。
